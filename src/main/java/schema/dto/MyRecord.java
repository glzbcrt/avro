/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package schema.dto;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MyRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3343916902905326078L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MyRecord\",\"namespace\":\"schema.dto\",\"fields\":[{\"name\":\"MyLong\",\"type\":\"long\"},{\"name\":\"MyUnion\",\"type\":[\"null\",\"string\"]},{\"name\":\"MyFloat\",\"type\":\"float\"},{\"name\":\"MyDouble\",\"type\":\"double\"},{\"name\":\"MyInt\",\"type\":\"int\"},{\"name\":\"MyBoolean\",\"type\":\"boolean\"},{\"name\":\"MyString\",\"type\":\"string\"},{\"name\":\"MyArray\",\"type\":{\"type\":\"array\",\"items\":\"string\"}},{\"name\":\"MyEnum\",\"type\":{\"type\":\"enum\",\"name\":\"MyEnum\",\"symbols\":[\"SYM1\",\"SYM2\",\"SYM3\"]}},{\"name\":\"MyMap\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"MyFixed\",\"type\":{\"type\":\"fixed\",\"name\":\"MyFixed\",\"size\":150}},{\"name\":\"MyBytes\",\"type\":\"bytes\"}],\"aliases\":[\"MyAlias\"]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MyRecord> ENCODER =
      new BinaryMessageEncoder<MyRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MyRecord> DECODER =
      new BinaryMessageDecoder<MyRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MyRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MyRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MyRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MyRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MyRecord from a ByteBuffer. */
  public static MyRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long MyLong;
  @Deprecated public java.lang.CharSequence MyUnion;
  @Deprecated public float MyFloat;
  @Deprecated public double MyDouble;
  @Deprecated public int MyInt;
  @Deprecated public boolean MyBoolean;
  @Deprecated public java.lang.CharSequence MyString;
  @Deprecated public java.util.List<java.lang.CharSequence> MyArray;
  @Deprecated public schema.dto.MyEnum MyEnum;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> MyMap;
  @Deprecated public schema.dto.MyFixed MyFixed;
  @Deprecated public java.nio.ByteBuffer MyBytes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MyRecord() {}

  /**
   * All-args constructor.
   * @param MyLong The new value for MyLong
   * @param MyUnion The new value for MyUnion
   * @param MyFloat The new value for MyFloat
   * @param MyDouble The new value for MyDouble
   * @param MyInt The new value for MyInt
   * @param MyBoolean The new value for MyBoolean
   * @param MyString The new value for MyString
   * @param MyArray The new value for MyArray
   * @param MyEnum The new value for MyEnum
   * @param MyMap The new value for MyMap
   * @param MyFixed The new value for MyFixed
   * @param MyBytes The new value for MyBytes
   */
  public MyRecord(java.lang.Long MyLong, java.lang.CharSequence MyUnion, java.lang.Float MyFloat, java.lang.Double MyDouble, java.lang.Integer MyInt, java.lang.Boolean MyBoolean, java.lang.CharSequence MyString, java.util.List<java.lang.CharSequence> MyArray, schema.dto.MyEnum MyEnum, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> MyMap, schema.dto.MyFixed MyFixed, java.nio.ByteBuffer MyBytes) {
    this.MyLong = MyLong;
    this.MyUnion = MyUnion;
    this.MyFloat = MyFloat;
    this.MyDouble = MyDouble;
    this.MyInt = MyInt;
    this.MyBoolean = MyBoolean;
    this.MyString = MyString;
    this.MyArray = MyArray;
    this.MyEnum = MyEnum;
    this.MyMap = MyMap;
    this.MyFixed = MyFixed;
    this.MyBytes = MyBytes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return MyLong;
    case 1: return MyUnion;
    case 2: return MyFloat;
    case 3: return MyDouble;
    case 4: return MyInt;
    case 5: return MyBoolean;
    case 6: return MyString;
    case 7: return MyArray;
    case 8: return MyEnum;
    case 9: return MyMap;
    case 10: return MyFixed;
    case 11: return MyBytes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: MyLong = (java.lang.Long)value$; break;
    case 1: MyUnion = (java.lang.CharSequence)value$; break;
    case 2: MyFloat = (java.lang.Float)value$; break;
    case 3: MyDouble = (java.lang.Double)value$; break;
    case 4: MyInt = (java.lang.Integer)value$; break;
    case 5: MyBoolean = (java.lang.Boolean)value$; break;
    case 6: MyString = (java.lang.CharSequence)value$; break;
    case 7: MyArray = (java.util.List<java.lang.CharSequence>)value$; break;
    case 8: MyEnum = (schema.dto.MyEnum)value$; break;
    case 9: MyMap = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 10: MyFixed = (schema.dto.MyFixed)value$; break;
    case 11: MyBytes = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'MyLong' field.
   * @return The value of the 'MyLong' field.
   */
  public java.lang.Long getMyLong() {
    return MyLong;
  }

  /**
   * Sets the value of the 'MyLong' field.
   * @param value the value to set.
   */
  public void setMyLong(java.lang.Long value) {
    this.MyLong = value;
  }

  /**
   * Gets the value of the 'MyUnion' field.
   * @return The value of the 'MyUnion' field.
   */
  public java.lang.CharSequence getMyUnion() {
    return MyUnion;
  }

  /**
   * Sets the value of the 'MyUnion' field.
   * @param value the value to set.
   */
  public void setMyUnion(java.lang.CharSequence value) {
    this.MyUnion = value;
  }

  /**
   * Gets the value of the 'MyFloat' field.
   * @return The value of the 'MyFloat' field.
   */
  public java.lang.Float getMyFloat() {
    return MyFloat;
  }

  /**
   * Sets the value of the 'MyFloat' field.
   * @param value the value to set.
   */
  public void setMyFloat(java.lang.Float value) {
    this.MyFloat = value;
  }

  /**
   * Gets the value of the 'MyDouble' field.
   * @return The value of the 'MyDouble' field.
   */
  public java.lang.Double getMyDouble() {
    return MyDouble;
  }

  /**
   * Sets the value of the 'MyDouble' field.
   * @param value the value to set.
   */
  public void setMyDouble(java.lang.Double value) {
    this.MyDouble = value;
  }

  /**
   * Gets the value of the 'MyInt' field.
   * @return The value of the 'MyInt' field.
   */
  public java.lang.Integer getMyInt() {
    return MyInt;
  }

  /**
   * Sets the value of the 'MyInt' field.
   * @param value the value to set.
   */
  public void setMyInt(java.lang.Integer value) {
    this.MyInt = value;
  }

  /**
   * Gets the value of the 'MyBoolean' field.
   * @return The value of the 'MyBoolean' field.
   */
  public java.lang.Boolean getMyBoolean() {
    return MyBoolean;
  }

  /**
   * Sets the value of the 'MyBoolean' field.
   * @param value the value to set.
   */
  public void setMyBoolean(java.lang.Boolean value) {
    this.MyBoolean = value;
  }

  /**
   * Gets the value of the 'MyString' field.
   * @return The value of the 'MyString' field.
   */
  public java.lang.CharSequence getMyString() {
    return MyString;
  }

  /**
   * Sets the value of the 'MyString' field.
   * @param value the value to set.
   */
  public void setMyString(java.lang.CharSequence value) {
    this.MyString = value;
  }

  /**
   * Gets the value of the 'MyArray' field.
   * @return The value of the 'MyArray' field.
   */
  public java.util.List<java.lang.CharSequence> getMyArray() {
    return MyArray;
  }

  /**
   * Sets the value of the 'MyArray' field.
   * @param value the value to set.
   */
  public void setMyArray(java.util.List<java.lang.CharSequence> value) {
    this.MyArray = value;
  }

  /**
   * Gets the value of the 'MyEnum' field.
   * @return The value of the 'MyEnum' field.
   */
  public schema.dto.MyEnum getMyEnum() {
    return MyEnum;
  }

  /**
   * Sets the value of the 'MyEnum' field.
   * @param value the value to set.
   */
  public void setMyEnum(schema.dto.MyEnum value) {
    this.MyEnum = value;
  }

  /**
   * Gets the value of the 'MyMap' field.
   * @return The value of the 'MyMap' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMyMap() {
    return MyMap;
  }

  /**
   * Sets the value of the 'MyMap' field.
   * @param value the value to set.
   */
  public void setMyMap(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.MyMap = value;
  }

  /**
   * Gets the value of the 'MyFixed' field.
   * @return The value of the 'MyFixed' field.
   */
  public schema.dto.MyFixed getMyFixed() {
    return MyFixed;
  }

  /**
   * Sets the value of the 'MyFixed' field.
   * @param value the value to set.
   */
  public void setMyFixed(schema.dto.MyFixed value) {
    this.MyFixed = value;
  }

  /**
   * Gets the value of the 'MyBytes' field.
   * @return The value of the 'MyBytes' field.
   */
  public java.nio.ByteBuffer getMyBytes() {
    return MyBytes;
  }

  /**
   * Sets the value of the 'MyBytes' field.
   * @param value the value to set.
   */
  public void setMyBytes(java.nio.ByteBuffer value) {
    this.MyBytes = value;
  }

  /**
   * Creates a new MyRecord RecordBuilder.
   * @return A new MyRecord RecordBuilder
   */
  public static schema.dto.MyRecord.Builder newBuilder() {
    return new schema.dto.MyRecord.Builder();
  }

  /**
   * Creates a new MyRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MyRecord RecordBuilder
   */
  public static schema.dto.MyRecord.Builder newBuilder(schema.dto.MyRecord.Builder other) {
    return new schema.dto.MyRecord.Builder(other);
  }

  /**
   * Creates a new MyRecord RecordBuilder by copying an existing MyRecord instance.
   * @param other The existing instance to copy.
   * @return A new MyRecord RecordBuilder
   */
  public static schema.dto.MyRecord.Builder newBuilder(schema.dto.MyRecord other) {
    return new schema.dto.MyRecord.Builder(other);
  }

  /**
   * RecordBuilder for MyRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MyRecord>
    implements org.apache.avro.data.RecordBuilder<MyRecord> {

    private long MyLong;
    private java.lang.CharSequence MyUnion;
    private float MyFloat;
    private double MyDouble;
    private int MyInt;
    private boolean MyBoolean;
    private java.lang.CharSequence MyString;
    private java.util.List<java.lang.CharSequence> MyArray;
    private schema.dto.MyEnum MyEnum;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> MyMap;
    private schema.dto.MyFixed MyFixed;
    private java.nio.ByteBuffer MyBytes;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(schema.dto.MyRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.MyLong)) {
        this.MyLong = data().deepCopy(fields()[0].schema(), other.MyLong);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.MyUnion)) {
        this.MyUnion = data().deepCopy(fields()[1].schema(), other.MyUnion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.MyFloat)) {
        this.MyFloat = data().deepCopy(fields()[2].schema(), other.MyFloat);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.MyDouble)) {
        this.MyDouble = data().deepCopy(fields()[3].schema(), other.MyDouble);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.MyInt)) {
        this.MyInt = data().deepCopy(fields()[4].schema(), other.MyInt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.MyBoolean)) {
        this.MyBoolean = data().deepCopy(fields()[5].schema(), other.MyBoolean);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.MyString)) {
        this.MyString = data().deepCopy(fields()[6].schema(), other.MyString);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.MyArray)) {
        this.MyArray = data().deepCopy(fields()[7].schema(), other.MyArray);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.MyEnum)) {
        this.MyEnum = data().deepCopy(fields()[8].schema(), other.MyEnum);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.MyMap)) {
        this.MyMap = data().deepCopy(fields()[9].schema(), other.MyMap);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.MyFixed)) {
        this.MyFixed = data().deepCopy(fields()[10].schema(), other.MyFixed);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.MyBytes)) {
        this.MyBytes = data().deepCopy(fields()[11].schema(), other.MyBytes);
        fieldSetFlags()[11] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MyRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(schema.dto.MyRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.MyLong)) {
        this.MyLong = data().deepCopy(fields()[0].schema(), other.MyLong);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.MyUnion)) {
        this.MyUnion = data().deepCopy(fields()[1].schema(), other.MyUnion);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.MyFloat)) {
        this.MyFloat = data().deepCopy(fields()[2].schema(), other.MyFloat);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.MyDouble)) {
        this.MyDouble = data().deepCopy(fields()[3].schema(), other.MyDouble);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.MyInt)) {
        this.MyInt = data().deepCopy(fields()[4].schema(), other.MyInt);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.MyBoolean)) {
        this.MyBoolean = data().deepCopy(fields()[5].schema(), other.MyBoolean);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.MyString)) {
        this.MyString = data().deepCopy(fields()[6].schema(), other.MyString);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.MyArray)) {
        this.MyArray = data().deepCopy(fields()[7].schema(), other.MyArray);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.MyEnum)) {
        this.MyEnum = data().deepCopy(fields()[8].schema(), other.MyEnum);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.MyMap)) {
        this.MyMap = data().deepCopy(fields()[9].schema(), other.MyMap);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.MyFixed)) {
        this.MyFixed = data().deepCopy(fields()[10].schema(), other.MyFixed);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.MyBytes)) {
        this.MyBytes = data().deepCopy(fields()[11].schema(), other.MyBytes);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'MyLong' field.
      * @return The value.
      */
    public java.lang.Long getMyLong() {
      return MyLong;
    }

    /**
      * Sets the value of the 'MyLong' field.
      * @param value The value of 'MyLong'.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder setMyLong(long value) {
      validate(fields()[0], value);
      this.MyLong = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'MyLong' field has been set.
      * @return True if the 'MyLong' field has been set, false otherwise.
      */
    public boolean hasMyLong() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'MyLong' field.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder clearMyLong() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'MyUnion' field.
      * @return The value.
      */
    public java.lang.CharSequence getMyUnion() {
      return MyUnion;
    }

    /**
      * Sets the value of the 'MyUnion' field.
      * @param value The value of 'MyUnion'.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder setMyUnion(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.MyUnion = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'MyUnion' field has been set.
      * @return True if the 'MyUnion' field has been set, false otherwise.
      */
    public boolean hasMyUnion() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'MyUnion' field.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder clearMyUnion() {
      MyUnion = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'MyFloat' field.
      * @return The value.
      */
    public java.lang.Float getMyFloat() {
      return MyFloat;
    }

    /**
      * Sets the value of the 'MyFloat' field.
      * @param value The value of 'MyFloat'.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder setMyFloat(float value) {
      validate(fields()[2], value);
      this.MyFloat = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'MyFloat' field has been set.
      * @return True if the 'MyFloat' field has been set, false otherwise.
      */
    public boolean hasMyFloat() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'MyFloat' field.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder clearMyFloat() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'MyDouble' field.
      * @return The value.
      */
    public java.lang.Double getMyDouble() {
      return MyDouble;
    }

    /**
      * Sets the value of the 'MyDouble' field.
      * @param value The value of 'MyDouble'.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder setMyDouble(double value) {
      validate(fields()[3], value);
      this.MyDouble = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'MyDouble' field has been set.
      * @return True if the 'MyDouble' field has been set, false otherwise.
      */
    public boolean hasMyDouble() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'MyDouble' field.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder clearMyDouble() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'MyInt' field.
      * @return The value.
      */
    public java.lang.Integer getMyInt() {
      return MyInt;
    }

    /**
      * Sets the value of the 'MyInt' field.
      * @param value The value of 'MyInt'.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder setMyInt(int value) {
      validate(fields()[4], value);
      this.MyInt = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'MyInt' field has been set.
      * @return True if the 'MyInt' field has been set, false otherwise.
      */
    public boolean hasMyInt() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'MyInt' field.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder clearMyInt() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'MyBoolean' field.
      * @return The value.
      */
    public java.lang.Boolean getMyBoolean() {
      return MyBoolean;
    }

    /**
      * Sets the value of the 'MyBoolean' field.
      * @param value The value of 'MyBoolean'.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder setMyBoolean(boolean value) {
      validate(fields()[5], value);
      this.MyBoolean = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'MyBoolean' field has been set.
      * @return True if the 'MyBoolean' field has been set, false otherwise.
      */
    public boolean hasMyBoolean() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'MyBoolean' field.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder clearMyBoolean() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'MyString' field.
      * @return The value.
      */
    public java.lang.CharSequence getMyString() {
      return MyString;
    }

    /**
      * Sets the value of the 'MyString' field.
      * @param value The value of 'MyString'.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder setMyString(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.MyString = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'MyString' field has been set.
      * @return True if the 'MyString' field has been set, false otherwise.
      */
    public boolean hasMyString() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'MyString' field.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder clearMyString() {
      MyString = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'MyArray' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getMyArray() {
      return MyArray;
    }

    /**
      * Sets the value of the 'MyArray' field.
      * @param value The value of 'MyArray'.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder setMyArray(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[7], value);
      this.MyArray = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'MyArray' field has been set.
      * @return True if the 'MyArray' field has been set, false otherwise.
      */
    public boolean hasMyArray() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'MyArray' field.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder clearMyArray() {
      MyArray = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'MyEnum' field.
      * @return The value.
      */
    public schema.dto.MyEnum getMyEnum() {
      return MyEnum;
    }

    /**
      * Sets the value of the 'MyEnum' field.
      * @param value The value of 'MyEnum'.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder setMyEnum(schema.dto.MyEnum value) {
      validate(fields()[8], value);
      this.MyEnum = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'MyEnum' field has been set.
      * @return True if the 'MyEnum' field has been set, false otherwise.
      */
    public boolean hasMyEnum() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'MyEnum' field.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder clearMyEnum() {
      MyEnum = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'MyMap' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMyMap() {
      return MyMap;
    }

    /**
      * Sets the value of the 'MyMap' field.
      * @param value The value of 'MyMap'.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder setMyMap(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[9], value);
      this.MyMap = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'MyMap' field has been set.
      * @return True if the 'MyMap' field has been set, false otherwise.
      */
    public boolean hasMyMap() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'MyMap' field.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder clearMyMap() {
      MyMap = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'MyFixed' field.
      * @return The value.
      */
    public schema.dto.MyFixed getMyFixed() {
      return MyFixed;
    }

    /**
      * Sets the value of the 'MyFixed' field.
      * @param value The value of 'MyFixed'.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder setMyFixed(schema.dto.MyFixed value) {
      validate(fields()[10], value);
      this.MyFixed = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'MyFixed' field has been set.
      * @return True if the 'MyFixed' field has been set, false otherwise.
      */
    public boolean hasMyFixed() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'MyFixed' field.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder clearMyFixed() {
      MyFixed = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'MyBytes' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getMyBytes() {
      return MyBytes;
    }

    /**
      * Sets the value of the 'MyBytes' field.
      * @param value The value of 'MyBytes'.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder setMyBytes(java.nio.ByteBuffer value) {
      validate(fields()[11], value);
      this.MyBytes = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'MyBytes' field has been set.
      * @return True if the 'MyBytes' field has been set, false otherwise.
      */
    public boolean hasMyBytes() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'MyBytes' field.
      * @return This builder.
      */
    public schema.dto.MyRecord.Builder clearMyBytes() {
      MyBytes = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MyRecord build() {
      try {
        MyRecord record = new MyRecord();
        record.MyLong = fieldSetFlags()[0] ? this.MyLong : (java.lang.Long) defaultValue(fields()[0]);
        record.MyUnion = fieldSetFlags()[1] ? this.MyUnion : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.MyFloat = fieldSetFlags()[2] ? this.MyFloat : (java.lang.Float) defaultValue(fields()[2]);
        record.MyDouble = fieldSetFlags()[3] ? this.MyDouble : (java.lang.Double) defaultValue(fields()[3]);
        record.MyInt = fieldSetFlags()[4] ? this.MyInt : (java.lang.Integer) defaultValue(fields()[4]);
        record.MyBoolean = fieldSetFlags()[5] ? this.MyBoolean : (java.lang.Boolean) defaultValue(fields()[5]);
        record.MyString = fieldSetFlags()[6] ? this.MyString : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.MyArray = fieldSetFlags()[7] ? this.MyArray : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[7]);
        record.MyEnum = fieldSetFlags()[8] ? this.MyEnum : (schema.dto.MyEnum) defaultValue(fields()[8]);
        record.MyMap = fieldSetFlags()[9] ? this.MyMap : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[9]);
        record.MyFixed = fieldSetFlags()[10] ? this.MyFixed : (schema.dto.MyFixed) defaultValue(fields()[10]);
        record.MyBytes = fieldSetFlags()[11] ? this.MyBytes : (java.nio.ByteBuffer) defaultValue(fields()[11]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MyRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<MyRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MyRecord>
    READER$ = (org.apache.avro.io.DatumReader<MyRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
